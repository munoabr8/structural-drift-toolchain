name: DORA Debug

on:
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

jobs:
  debug:
    runs-on: ubuntu-latest
    env:
      MAIN_BRANCH: main
      WINDOW_DAYS: "14"
      GH_TOKEN: ${{ github.token }}
      GITHUB_REPOSITORY: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq gh python3

      - name: Show env
        run: |
          set -euo pipefail
          echo "repo=$GITHUB_REPOSITORY"
          echo "branch=$MAIN_BRANCH"
          gh --version || true

      - name: Probe gh run list (raw)
        continue-on-error: true
        run: |
          set -euo pipefail
          gh run list --workflow "Deploy" --branch "$MAIN_BRANCH" -L 50 \
            --json databaseId,createdAt,conclusion | tee runs.json
          echo "type:"; jq -r 'type' runs.json
          echo "keys of first:"; jq -r '.[0]? | keys? // []' runs.json

      - name: Extract latest successful RUN_ID
        id: pick
        continue-on-error: true
        run: |
          set -euo pipefail
          RUN_ID="$(jq -r 'map(select(.conclusion=="success")) | sort_by(.createdAt) | (last // {}) | (.databaseId // empty)' runs.json)"
          echo "RUN_ID=$RUN_ID"
          echo "run_id=$RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Download deploy artifact (best-effort)
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p debug_artifacts
          if [[ -n "${{ steps.pick.outputs.run_id }}" ]]; then
            gh run download "${{ steps.pick.outputs.run_id }}" -n events-ndjson -D debug_artifacts
          fi
          echo "List:"
          find debug_artifacts -maxdepth 2 -type f -print || true
          # try common paths
          for p in \
            "debug_artifacts/events.ndjson" \
            "debug_artifacts/events-ndjson/events.ndjson" \
            ; do
            if [[ -f "$p" ]]; then cp -f "$p" artifact.events.ndjson; fi
          done
          if [[ -f artifact.events.ndjson ]]; then
            echo "artifact events sample:"
            head -n 5 artifact.events.ndjson
            echo "artifact events count:"
            wc -l < artifact.events.ndjson
            jq -s '{deploys: map(select(.type=="deployment")) | length}' artifact.events.ndjson
          else
            echo "no artifact events.ndjson found" >&2
          fi
 
      - name: Collect PR merges (probe)
        env:
              DEPLOY_SOURCE: deployments        # avoid runs-mode entirely
              DEPLOY_ENV: production            # if your deployments API filter needs it
              MAIN_BRANCH: main
              WINDOW_DAYS: "14"
              GH_TOKEN: ${{ github.token }}
              GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
              set -euo pipefail
              bash ci/dora/collect-events.sh pr.ndjson
              jq -c 'select(.type=="pr_merged")' pr.ndjson > pr_only.ndjson
              echo "pr_only count:"; wc -l < pr_only.ndjson || true
              jq -c '{sha:(.merge_commit_sha // .sha // .head_sha), merged_at}' pr_only.ndjson | head




      - name: Merge artifact+PRs (debug)
        continue-on-error: true
        run: |
          set -euo pipefail
          : > events.ndjson
          [[ -s artifact.events.ndjson ]] && cat artifact.events.ndjson >> events.ndjson
          [[ -s pr_only.ndjson ]] && cat pr_only.ndjson >> events.ndjson
          if [[ -s events.ndjson ]]; then
            echo "combined count:"; wc -l < events.ndjson
            echo "types:"
            jq -s '{prs:map(select(.type=="pr_merged"))|length, deps:map(select(.type=="deployment"))|length}' events.ndjson
          else
            echo "no events combined" >&2
          fi

      - name: Dry-run join check
        continue-on-error: true
        run: |
          set -euo pipefail
          [[ -s events.ndjson ]] || { echo "no events.ndjson" >&2; exit 0; }
          jq -sr '
            def key: .sha // .merge_commit_sha // .head_sha;
            def m: .merged_at // .mergedAt // .time;
            def d: .finished_at // .deploy_at // .time;
            . as $all
            | ($all|map(select(.type=="pr_merged")|{k:(key),m:(m)})) as $prs
            | ($all|map(select(.type=="deployment" and ((.status//"success")=="success"))|{k:(key),d:(d)})) as $deps
            | {
                prs:($prs|length),
                deps:($deps|length),
                sample_pair: ( [ $prs[], $deps[] ]
                  | combinations
                  | map({p:.[0], q:.[1]})
                  | map(select(.p.k==.q.k))
                  | map(select((.q.d|fromdateiso8601) > (.p.m|fromdateiso8601)))
                  | .[0] // null)
              }' events.ndjson

      - name: Run prepare-events.sh (continue on error)
        continue-on-error: true
        run: |
          set -euo pipefail
          bash ci/dora/prepare-events.sh || true
          if [[ -s events.ndjson ]]; then
            echo "prepared events count:"; wc -l < events.ndjson
            jq -s '{prs:map(select(.type=="pr_merged"))|length, deps:map(select(.type=="deployment"))|length}' events.ndjson
          else
            echo "no prepared events.ndjson" >&2
          fi

      - name: Compute DORA if possible
        continue-on-error: true
        run: |
          set -euo pipefail
          if [[ -s events.ndjson ]]; then
            python3 ci/dora/compute-dora.py events.ndjson | tee dora.out.txt
          else
            echo "skip compute; no events.ndjson"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: dora-debug-bundle
          path: |
            runs.json
            artifact.events.ndjson
            pr.ndjson
            pr_only.ndjson
            events.ndjson
            dora.out.txt
